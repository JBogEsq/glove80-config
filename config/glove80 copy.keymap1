
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Functions_Symbols 2
#define LAYER_NumPad_Nav 3
#define LAYER_Magic 4
#define LAYER_Editing 5
#define LAYER_Excel 6

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};


    /* Custom Defined Behaviors */
/ {

};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1       &kp F2       &kp F3       &kp F4       &kp F5                                                                                                            &kp F6      &kp F7       &kp F8       &kp F9    &kp F10
                &none       &kp N1       &kp N2       &kp N3       &kp N4            &kp N5                                                                              &kp N6      &kp N7      &kp N8       &kp N9       &kp N0   &kp BSPC
              &kp TAB  &mt LC(Z) Z        &kp W        &kp M        &kp B  &mt LS(N8) EQUAL                                                                     &mt GRAVE MINUS       &kp J       &kp F        &kp K        &kp X    &kp DEL
              &kp ESC  &mt LSHFT S  &mt LCTRL T   &mt LALT R   &mt LGUI H       &mt LC(Y) Y                                                                        &mt FSLH DOT  &mt RGUI N  &mt RALT A  &mt RCTRL O  &mt RSHFT I    &kp RET
            &kp LCTRL  &mt LC(V) V        &kp G  &mt LC(C) C  &mt LC(D) D      &mt SEMI SQT   &mo 2          &mo 3   &mo 5   &none           &none      &none  &mt LS(N1) COMMA       &kp L       &kp U        &kp P        &kp Q  &kp RCTRL
 &magic LAYER_Magic 0     &kp LALT        &to 3        &to 0        &to 6                     &kp E  &mt LSHFT RET  &lower   &none  &mt RSHFT BSPC  &kp SPACE                         &none       &none        &none     &kp RALT   &kp RGUI
            >;
        };

        layer_Lower {
            bindings = <
                &none                &none           &none           &none            &none                                                                                       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
                &none                &none       &kp PSCRN           &none            &none         &none                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
              &kp TAB  &mt C_PREV C_VOL_DN        &kp HOME    &kp UP_ARROW        &kp PG_UP    &caps_word                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
              &kp ESC      &mt C_PP C_MUTE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &mt INS CAPS                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
            &kp LCTRL  &mt C_NEXT C_VOL_UP         &kp END        &kp SLCK        &kp PG_DN     &sk LSHFT   &none   &none   &none  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0             &kp LALT       &sk LCTRL           &to 0         &sk LALT                 &none   &none   &none  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Functions_Symbols {
            bindings = <
 &trans        &trans         &trans         &trans         &trans                                                                                &trans         &trans    &trans  &trans  &trans
  &none         &none          &none          &none          &none      &none                                                     &trans          &trans         &trans    &trans  &trans  &trans
 &trans   &mt F1 EXCL      &mt F2 AT    &mt F3 HASH    &mt F4 DLLR   &kp PLUS                                                   &kp LBRC   &mt LBRC LBKT  &mt RBRC RBKT  &kp RBRC   &none  &trans
 &trans  &mt F5 PRCNT   &mt F6 CARET    &mt F7 AMPS    &mt F8 STAR  &kp EQUAL                                                     &kp LT     &mt LT LPAR    &mt GT RPAR    &kp GT   &none  &trans
 &trans  &mt F9 TILDE  &mt F10 GRAVE  &mt F11 MINUS  &mt F12 UNDER  &sk LSHFT  &trans  &trans  &trans  &trans  &trans  &trans  &kp GRAVE  &mt GRAVE FSLH  &mt PIPE BSLH  &kp PIPE   &none  &trans
 &trans        &trans      &sk LCTRL          &to 0       &sk LALT             &trans  &trans  &trans  &trans  &trans  &trans                      &none          &none    &trans  &trans  &trans
            >;
        };

        layer_NumPad_Nav {
            bindings = <
                &none         &none      &none      &none      &none                                                                                             &trans  &trans  &trans  &trans  &trans
                &none      &kp BSPC      &none      &none      &none                    &none                                                            &trans  &trans  &trans  &trans  &trans  &trans
              &kp TAB  &kp KP_EQUAL  &kp KP_N7  &kp KP_N8  &kp KP_N9        &mt LC(GRAVE) SQT                                                            &trans  &trans  &trans  &trans  &trans  &trans
              &kp ESC       &kp RET  &kp KP_N4  &kp KP_N5  &kp KP_N6  &mt KP_MULTIPLY KP_PLUS                                                            &trans  &trans  &trans  &trans  &trans  &trans
            &kp LCTRL    &kp KP_DOT  &kp KP_N1  &kp KP_N2  &kp KP_N3    &mt KP_SLASH KP_MINUS      &mo 2          &mo 5   &mo 6  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &magic LAYER_Magic 0      &kp LALT      &none      &to 0      &none                           &kp KP_N0  &mt LSHFT RET  &lower  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &to 3
            >;
        };

        layer_Editing {
            bindings = <
 &trans     &trans         &trans        &trans           &trans                                                                           &trans  &trans  &trans  &trans  &trans
 &trans     &trans         &trans        &trans           &trans           &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp LC(N)  &kp LS(PG_UP)  &kp LC(LEFT)    &kp LC(RIGHT)           &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp LC(S)  &kp LS(PG_DN)     &kp LC(A)  &mt LC(X) LC(C)        &kp LC(V)                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp LC(O)      &sk LCTRL      &sk LALT        &sk LSHFT  &mt LC(Y) LC(Z)  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &trans         &trans         &to 0           &trans                   &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Excel {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
